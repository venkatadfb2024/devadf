{
	"name": "DF_Type2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_Gen_Read_Generic",
						"type": "DatasetReference"
					},
					"name": "Source"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_DB_Generic",
						"type": "DatasetReference"
					},
					"name": "SQL"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_DB_Generic",
						"type": "DatasetReference"
					},
					"name": "insertsink"
				},
				{
					"dataset": {
						"referenceName": "DS_Azure_SQL_DB_Generic",
						"type": "DatasetReference"
					},
					"name": "updatesink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PartID as string,",
				"          PartName as string,",
				"          MRP as short,",
				"          Price as short,",
				"          Plant as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Source",
				"source(output(",
				"          ID as integer,",
				"          Part_Id as string,",
				"          PartName as string,",
				"          MRP as string,",
				"          Price as string,",
				"          Plant as string,",
				"          Active as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     partitionBy('hash', 1)) ~> SQL",
				"Source derive(IsActive = 'A') ~> derivedColumn1",
				"SQL select(mapColumn(",
				"          SQLID = ID,",
				"          SQLPart_Id = Part_Id,",
				"          SQLPartName = PartName,",
				"          SQLMRP = MRP,",
				"          SQLPrice = Price,",
				"          SQLPlant = Plant,",
				"          SQLActive = Active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"Source, select1 lookup(PartID == SQLPart_Id,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQLPart_Id),",
				"     partitionBy('hash', 1)) ~> filter1",
				"filter1 select(mapColumn(",
				"          SQLID,",
				"          SQLPart_Id,",
				"          SQLPartName,",
				"          SQLMRP,",
				"          SQLPrice,",
				"          SQLPlant,",
				"          SQLActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQLActive = 'I') ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(true()),",
				"     partitionBy('hash', 1)) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Part_Id as string,",
				"          PartName as string,",
				"          MRP as string,",
				"          Price as string,",
				"          Plant as string,",
				"          Active as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Part_Id = PartID,",
				"          PartName,",
				"          MRP,",
				"          Price,",
				"          Plant,",
				"          Active = IsActive",
				"     ),",
				"     partitionBy('hash', 1)) ~> insertsink",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as integer,",
				"          Part_Id as string,",
				"          PartName as string,",
				"          MRP as string,",
				"          Price as string,",
				"          Plant as string,",
				"          Active as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          ID = SQLID,",
				"          Part_Id = SQLPart_Id,",
				"          PartName = SQLPartName,",
				"          MRP = SQLMRP,",
				"          Price = SQLPrice,",
				"          Plant = SQLPlant,",
				"          Active = SQLActive",
				"     )) ~> updatesink2"
			]
		}
	}
}
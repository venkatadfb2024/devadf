{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfApril08"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_get_MetadaTa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addDays(utcnow(),-1)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"wildcardFileName": "*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Blob_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Gen2_CSV_Genc",
								"type": "DatasetReference",
								"parameters": {
									"SubDirectory": "Test"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-23T15:03:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('untilflag'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select status from TupdateMst",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "TupdateMst"
											}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup1').output.firstRow.status,'Y')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "flase",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "untilflag",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"untilflag": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-29T14:20:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_DataFlow_generic",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_sal as short,",
						"          emp_departID as string,",
						"          emp_location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['emp_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TR_Today')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_DataFlow_generic",
								"type": "DatasetReference"
							},
							"name": "MaterialData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Part_ID as integer,",
						"          Part_name as string,",
						"          MRP as short,",
						"          Price as short,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> MaterialData",
						"MaterialData split(Division=='22',",
						"     Division!='22',",
						"     disjoint: true) ~> split1@(Division22, OthersThan22, Others)",
						"split1@Division22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_ID,",
						"          Part_name,",
						"          MRP,",
						"          Price,",
						"          Division",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@OthersThan22 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_ID,",
						"          Part_name,",
						"          MRP,",
						"          Price,",
						"          Division",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Type2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_Gen_Read_Generic",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "SQL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "insertsink"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "updatesink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PartID as string,",
						"          PartName as string,",
						"          MRP as short,",
						"          Price as short,",
						"          Plant as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Source",
						"source(output(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> SQL",
						"Source derive(IsActive = 'A') ~> derivedColumn1",
						"SQL select(mapColumn(",
						"          SQLID = ID,",
						"          SQLPart_Id = Part_Id,",
						"          SQLPartName = PartName,",
						"          SQLMRP = MRP,",
						"          SQLPrice = Price,",
						"          SQLPlant = Plant,",
						"          SQLActive = Active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Source, select1 lookup(PartID == SQLPart_Id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQLPart_Id),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 select(mapColumn(",
						"          SQLID,",
						"          SQLPart_Id,",
						"          SQLPartName,",
						"          SQLMRP,",
						"          SQLPrice,",
						"          SQLPlant,",
						"          SQLActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(SQLActive = 'I') ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_Id = PartID,",
						"          PartName,",
						"          MRP,",
						"          Price,",
						"          Plant,",
						"          Active = IsActive",
						"     ),",
						"     partitionBy('hash', 1)) ~> insertsink",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID = SQLID,",
						"          Part_Id = SQLPart_Id,",
						"          PartName = SQLPartName,",
						"          MRP = SQLMRP,",
						"          Price = SQLPrice,",
						"          Plant = SQLPlant,",
						"          Active = SQLActive",
						"     )) ~> updatesink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Chilld')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Test",
							"value": {
								"value": "@pipeline().parameters.ChildName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Parentname": {
									"value": "@pipeline().parameters.PLName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Get_Metdata_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ChildName": {
						"type": "string"
					},
					"PLName": {
						"type": "string"
					}
				},
				"variables": {
					"Test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-24T15:29:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EMP_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_TR_Today",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MaterialData": {
										"FileName": "PartData.txt"
									},
									"sink1": {
										"TableName": "Tpartmaster_22"
									},
									"sink2": {
										"TableName": "Tpartmaster_Others"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T03:15:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_TR_Today')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Execute_Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_pDF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Get_Metdata_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-24T15:01:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Type2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {
										"FName": "MaterialData.txt"
									},
									"SQL": {
										"TableName": "TPartmaster"
									},
									"insertsink": {
										"TableName": "TPartmaster"
									},
									"updatesink2": {
										"TableName": "TPartmaster"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T19:04:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Type2')]"
			]
		}
	]
}
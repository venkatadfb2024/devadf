{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfApril08"
		},
		"LS_Azure_SQL_DB_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Azure_SQL_DB'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azuresqlserverapril12.database.windows.net;Initial Catalog=azuresqldbapril12;User ID=dbadmin"
		},
		"LS_BlobStorage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_BlobStorage'"
		},
		"LS_OnPrem_FileSystem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_OnPrem_FileSystem'"
		},
		"LS_OnPrem_Sql_Server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_OnPrem_Sql_Server'",
			"defaultValue": "Integrated Security=True;Data Source=US-PF2N8JB0\\SQLEXPRESS;Initial Catalog=AdventureWorks2012"
		},
		"LS_OnPrem_Sql_Server_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_OnPrem_Sql_Server'"
		},
		"LS_ADLS_gen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsgen2april17.dfs.core.windows.net/"
		},
		"LS_ADLS_gen2_properties_typeProperties_tenant": {
			"type": "string",
			"defaultValue": "1283f659-f072-46da-9ac4-2552170ec82a"
		},
		"LS_ADLS_gen2_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "83887325-624f-49a1-8f9c-1cd010384333"
		},
		"LS_Azure_Key_Vault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://akvapril12.vault.azure.net/"
		},
		"LS_OnPrem_FileSystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Finance"
		},
		"LS_OnPrem_FileSystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "EAD\\vravala2"
		},
		"LS_OnPrem_Sql_Server_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "EAD\\vravala2"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LS_get_LastModied_Date_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_OnPrem_FileSystem_CSV",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_OnPrem_FileSystem_CSV_Generic",
											"type": "DatasetReference",
											"parameters": {
												"FilteredFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-23T15:11:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_FileSystem_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_FileSystem_CSV_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Chilld')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Test",
							"value": {
								"value": "@pipeline().parameters.ChildName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Parent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Parentname": {
									"value": "@pipeline().parameters.PLName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Get_Metdata_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ChildName": {
						"type": "string"
					},
					"PLName": {
						"type": "string"
					}
				},
				"variables": {
					"Test": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-24T15:29:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Parent')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Get_Metdata_Tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_Multiple_Files_OnPrem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_OnPrem_FileSystem_CSV",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "FilterFileName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_OnPrem_FileSystem_CSV_Generic",
											"type": "DatasetReference",
											"parameters": {
												"FilteredFileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_Gen2_CSV_Genc",
											"type": "DatasetReference",
											"parameters": {
												"SubDirectory": "getmetadata"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@or(startswith(item().name,'Sales') , startswith(item().name,'Part'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"FilterFileName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-22T15:53:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_FileSystem_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_FileSystem_CSV_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen2_CSV_Genc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_Multiple_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.ConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Name",
										"value": {
											"value": "@item().Table_Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_OnPrem_SQL_Generic",
											"type": "DatasetReference",
											"parameters": {
												"OnPremTableName": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"schema": {
													"value": "@item().schema_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Blob_CSV_Genreic",
											"type": "DatasetReference",
											"parameters": {
												"DirectoryName": "sqlserver",
												"TargetDire": {
													"value": "@pipeline().parameters.TargetDirectory",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "On Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_PL_AuditLog]",
										"storedProcedureParameters": {
											"ErrorMsg": {
												"value": "Success",
												"type": "String"
											},
											"PL_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"plRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsRead": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RowsWritten": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"Table_Name": {
												"value": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SQL_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "On Fail",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_PL_AuditLog]",
										"storedProcedureParameters": {
											"ErrorMsg": {
												"value": {
													"value": "@activity('Copy data1').Error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"PL_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"plRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsRead": {
												"value": null,
												"type": "Int32"
											},
											"RowsWritten": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "Failed",
												"type": "String"
											},
											"Table_Name": {
												"value": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SQL_DB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ConfigTableName": {
						"type": "string"
					},
					"TargetDirectory": {
						"type": "string",
						"defaultValue": "sqlserver"
					}
				},
				"variables": {
					"Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T18:59:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV_Genreic')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_Multiple_Tables_Adls_Gen 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.ConfigTableName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Name",
										"value": {
											"value": "@item().Table_Name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_OnPrem_SQL_Generic",
											"type": "DatasetReference",
											"parameters": {
												"OnPremTableName": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"schema": {
													"value": "@item().schema_name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ADLS_Gen2_CSV_Genc",
											"type": "DatasetReference",
											"parameters": {
												"SubDirectory": {
													"value": "@pipeline().parameters.TargetDirectory",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "On Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_PL_AuditLog]",
										"storedProcedureParameters": {
											"ErrorMsg": {
												"value": "Success",
												"type": "String"
											},
											"PL_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"plRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsRead": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RowsWritten": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"status": {
												"value": "Success",
												"type": "String"
											},
											"Table_Name": {
												"value": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SQL_DB",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "On Fail",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[SP_PL_AuditLog]",
										"storedProcedureParameters": {
											"ErrorMsg": {
												"value": {
													"value": "@activity('Copy data1').Error.message",
													"type": "Expression"
												},
												"type": "String"
											},
											"PL_Name": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"plRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"rowsRead": {
												"value": null,
												"type": "Int32"
											},
											"RowsWritten": {
												"value": null,
												"type": "Int32"
											},
											"status": {
												"value": "Failed",
												"type": "String"
											},
											"Table_Name": {
												"value": {
													"value": "@item().Table_Name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_Azure_SQL_DB",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ConfigTableName": {
						"type": "string"
					},
					"TargetDirectory": {
						"type": "string",
						"defaultValue": "sqlserver"
					}
				},
				"variables": {
					"Name": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T18:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_SQL_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen2_CSV_Genc')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_OnPrem_FileSystem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": null,
									"wildcardFileName": "*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_FileSystem_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Blob_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-22T15:48:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_FileSystem_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_OnPrem_Sql_Azure_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "drop table Tdepartment",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_SQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Tdepartment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T18:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_SQL')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_pDF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*.bin",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_OnPrem_Binary",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Binary_OnPrem_Blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-22T15:48:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_Binary')]",
				"[concat(variables('factoryId'), '/datasets/DS_Binary_OnPrem_Blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_CALL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Test",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-23T17:28:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Dyn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_Gen2_Read",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from TMap where sourcefilename='@{item().name}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "tt"
											}
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(activity('Lookup1').output.firstRow.Mapping)\n\n",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_Gen_Read_Generic",
											"type": "DatasetReference",
											"parameters": {
												"FName": {
													"value": "@activity('Lookup1').output.firstRow.sourcefilename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@activity('Lookup1').output.firstRow.TgetTableName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T18:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen2_Read')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen_Read_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Dynamic_Col_Mapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_Gen2_Read",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from Tmapping where sourcefilename='@{item().name}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "TMapping"
											}
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"value": "@json(activity('Lookup1').output.firstRow.JsonMapping)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ADLS_Gen_Read_Generic",
											"type": "DatasetReference",
											"parameters": {
												"FName": {
													"value": "@activity('Lookup1').output.firstRow.sourceFilename",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@activity('Lookup1').output.firstRow.TgtTable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ADLS_Gen2_Read",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:00:30",
							"sleep": 2,
							"childItems": true
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Validation1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T18:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen2_Read')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen_Read_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EMP_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_TR_Today",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MaterialData": {
										"FileName": "PartData.txt"
									},
									"sink1": {
										"TableName": "Tpartmaster_22"
									},
									"sink2": {
										"TableName": "Tpartmaster_Others"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T03:15:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_TR_Today')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Execute_Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Copy_pDF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Get_Metdata_Tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-24T15:01:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Copy_pDF')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Get_Metdata_Tables')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Get_Metdata_Tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_OnPrem_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-23T15:20:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_OnPrem_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Parent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 40
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Parentname": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-24T15:18:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Type2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {
										"FName": "MaterialData.txt"
									},
									"SQL": {
										"TableName": "TPartmaster"
									},
									"insertsink": {
										"TableName": "TPartmaster"
									},
									"updatesink2": {
										"TableName": "TPartmaster"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-26T19:04:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Type2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('untilflag'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 3
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select Status from TRefreshMaster  where Table_name='TMaterialMaster'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@pipeline().parameters.Table_Name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup1').output.firstRow.status,'Y')",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "untilflag",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Ouput",
										"value": {
											"value": "@activity('Lookup1').output.firstRow.Status",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Table_Name": {
						"type": "string",
						"defaultValue": "TMaterialMaster"
					}
				},
				"variables": {
					"untilflag": {
						"type": "String",
						"defaultValue": "False"
					},
					"Ouput": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-29T15:20:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_get_MetadaTa')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addDays(utcnow(),-1)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"wildcardFileName": "*.txt",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Blob_CSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ADLS_Gen2_CSV_Genc",
								"type": "DatasetReference",
								"parameters": {
									"SubDirectory": "Test"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-23T15:03:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen2_CSV_Genc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('untilflag'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								},
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Wait1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "select status from TupdateMst",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Azure_SQL_DB_Generic",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "TupdateMst"
											}
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup1').output.firstRow.status,'Y')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "flase",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 1
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "untilflag",
													"value": {
														"value": "true",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"untilflag": {
						"type": "String",
						"defaultValue": "False"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-04-29T14:20:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Gen2_CSV_Genc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SubDirectory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat(\ndataset().SubDirectory, '/' ,\nformatDateTime( utcnow(),'yyyy'),'/',\nformatDateTime( utcnow(),'MM'),'/',\nformatDateTime( utcnow(),'dd'),'/')\n",
							"type": "Expression"
						},
						"fileSystem": "spares"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Gen2_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ouput",
						"fileSystem": "dataflow"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Gen2_Read')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "test"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ADLS_Gen_Read_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ADLS_gen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FName",
							"type": "Expression"
						},
						"fileSystem": "dynamicmap"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ADLS_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Azure_SQL_DB_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Azure_SQL_DB",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Part_Id",
						"type": "varchar"
					},
					{
						"name": "PartName",
						"type": "varchar"
					},
					{
						"name": "MRP",
						"type": "varchar"
					},
					{
						"name": "Price",
						"type": "varchar"
					},
					{
						"name": "Plant",
						"type": "varchar"
					},
					{
						"name": "Active",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_SQL_DB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Binary_OnPrem_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "sql"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "service"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_CSV_DataFlow_generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "dataflow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_CSV_Genreic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DirectoryName": {
						"type": "String",
						"defaultValue": "sqlserver"
					},
					"TargetDire": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat(\ndataset().DirectoryName, '/' ,\nformatDateTime( utcnow(),'yyyy'),'/',\nformatDateTime( utcnow(),'MM'),'/',\nformatDateTime( utcnow(),'dd'),'/')",
							"type": "Expression"
						},
						"container": "dataflow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_Data_flows_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample_employee.txt",
						"container": "mmstorage"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_BlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "OutPut",
						"container": "mmstorage"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_BlobStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_FileSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_FileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_FileSystem_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_FileSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_FileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_FileSystem_CSV_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_FileSystem",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FilteredFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().FilteredFileName",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_FileSystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_Sql_Server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "HumanResources",
					"table": "venkat"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_Sql_Server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OnPrem_SQL_Generic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_Sql_Server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OnPremTableName": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().OnPremTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_Sql_Server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Sql_OnPrem_Gen')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OnPrem_Sql_Server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OnPremTName": {
						"type": "string"
					},
					"Schema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OnPrem_Sql_Server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ADLS_gen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_ADLS_gen2_properties_typeProperties_url')]",
					"tenant": "[parameters('LS_ADLS_gen2_properties_typeProperties_tenant')]",
					"servicePrincipalId": "[parameters('LS_ADLS_gen2_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredentialType": "ServicePrincipalKey",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Azure_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "SPN",
						"secretVersion": "26e74eb5f8af428ab0ef9b4dfc147ad1"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_Key_Vault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_Azure_Key_Vault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Azure_SQL_DB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_Azure_SQL_DB_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_Azure_Key_Vault",
							"type": "LinkedServiceReference"
						},
						"secretName": "azuresqldbpassword",
						"secretVersion": "5aae6641676c49b3abffc6fde785c34b"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Azure_Key_Vault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_BlobStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_BlobStorage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OnPrem_FileSystem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LS_OnPrem_FileSystem_properties_typeProperties_host')]",
					"userId": "[parameters('LS_OnPrem_FileSystem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_OnPrem_FileSystem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OnPrem_Sql_Server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_OnPrem_Sql_Server_connectionString')]",
					"userName": "[parameters('LS_OnPrem_Sql_Server_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_OnPrem_Sql_Server_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_DataFlow_generic",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as integer,",
						"          emp_name as string,",
						"          emp_sal as short,",
						"          emp_departID as string,",
						"          emp_location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['emp_id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV_DataFlow_generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Employee_TR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_DataFlow_generic",
								"type": "DatasetReference"
							},
							"name": "Emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_Genreic",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "addnewcolumn"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          emp_name as string,",
						"          emp_sal as short,",
						"          emp_departID as string,",
						"          emp_location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 50,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> Emp",
						"Emp derive(empvariablePay = emp_sal*10/100,",
						"     partitionBy('hash', 1)) ~> addnewcolumn",
						"addnewcolumn select(mapColumn(",
						"          EmpID = emp_id,",
						"          EmpName = emp_name,",
						"          EmpSal = emp_sal,",
						"          emp_departID,",
						"          empvariablePay",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(emp_departID),",
						"     SumSalary = sum(EmpSal),",
						"     partitionBy('hash', 1)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV_DataFlow_generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV_Genreic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_TR_Today')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_CSV_DataFlow_generic",
								"type": "DatasetReference"
							},
							"name": "MaterialData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Part_ID as integer,",
						"          Part_name as string,",
						"          MRP as short,",
						"          Price as short,",
						"          Division as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> MaterialData",
						"MaterialData split(Division=='22',",
						"     Division!='22',",
						"     disjoint: true) ~> split1@(Division22, OthersThan22, Others)",
						"split1@Division22 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_ID,",
						"          Part_name,",
						"          MRP,",
						"          Price,",
						"          Division",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@OthersThan22 sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_ID,",
						"          Part_name,",
						"          MRP,",
						"          Price,",
						"          Division",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_CSV_DataFlow_generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Blob_Data_flows_CSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Blob_Parquet",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          emp_id as short,",
						"          emp_name as string,",
						"          emp_sal as short,",
						"          emp_departID as string,",
						"          emp_location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 derive(emp_bonuspay = emp_sal*10/100,",
						"     partitionBy('hash', 1)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          emp_id,",
						"          emp_name,",
						"          emp_sal,",
						"          emp_departID,",
						"          emp_bonuspay",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(emp_departID),",
						"     SumOfSalary = sum(emp_sal)) ~> aggregate1",
						"aggregate1 keyGenerate(output(ID as long),",
						"     startAt: 1000L,",
						"     stepValue: 1L,",
						"     partitionBy('hash', 1)) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['EmployeeData.parquet'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_Data_flows_CSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_Blob_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Type2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ADLS_Gen_Read_Generic",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "SQL"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "insertsink"
						},
						{
							"dataset": {
								"referenceName": "DS_Azure_SQL_DB_Generic",
								"type": "DatasetReference"
							},
							"name": "updatesink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PartID as string,",
						"          PartName as string,",
						"          MRP as short,",
						"          Price as short,",
						"          Plant as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Source",
						"source(output(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> SQL",
						"Source derive(IsActive = 'A') ~> derivedColumn1",
						"SQL select(mapColumn(",
						"          SQLID = ID,",
						"          SQLPart_Id = Part_Id,",
						"          SQLPartName = PartName,",
						"          SQLMRP = MRP,",
						"          SQLPrice = Price,",
						"          SQLPlant = Plant,",
						"          SQLActive = Active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Source, select1 lookup(PartID == SQLPart_Id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQLPart_Id),",
						"     partitionBy('hash', 1)) ~> filter1",
						"filter1 select(mapColumn(",
						"          SQLID,",
						"          SQLPart_Id,",
						"          SQLPartName,",
						"          SQLMRP,",
						"          SQLPrice,",
						"          SQLPlant,",
						"          SQLActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(SQLActive = 'I') ~> derivedColumn2",
						"derivedColumn2 alterRow(updateIf(true()),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Part_Id = PartID,",
						"          PartName,",
						"          MRP,",
						"          Price,",
						"          Plant,",
						"          Active = IsActive",
						"     ),",
						"     partitionBy('hash', 1)) ~> insertsink",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Part_Id as string,",
						"          PartName as string,",
						"          MRP as string,",
						"          Price as string,",
						"          Plant as string,",
						"          Active as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID = SQLID,",
						"          Part_Id = SQLPart_Id,",
						"          PartName = SQLPartName,",
						"          MRP = SQLMRP,",
						"          Price = SQLPrice,",
						"          Plant = SQLPlant,",
						"          Active = SQLActive",
						"     )) ~> updatesink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ADLS_Gen_Read_Generic')]",
				"[concat(variables('factoryId'), '/datasets/DS_Azure_SQL_DB_Generic')]"
			]
		}
	]
}